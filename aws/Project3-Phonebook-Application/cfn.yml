AWSTemplateFormatVersion: 2010-09-09

Description: |
  This temp creates an ASG behind an ALB.  

Parameters:
  myKP:
    Description: Select your KP
    Type: AWS::EC2::KeyPair::KeyName


  mySubnets:
    Description: Please select at least 2 subnets. 
    Type: List<AWS::EC2::Subnet::Id>

  myVPC:
    Description: Please select VPC 
    Type: AWS::EC2::VPC::Id


Resources:
  MyDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: 'phonebook'
      AllocatedStorage: '20'
      DBInstanceClass: db.t2.micro
      Engine: MySQL
      EngineVersion: 8.0.19
      MasterUsername: 'admin'
      MasterUserPassword: 'selmankoc'

  myListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: # Required
        - Type: forward
          TargetGroupArn: !Ref myTG 
      LoadBalancerArn: !Ref myALB # Required
      Port: 80
      Protocol: HTTP

  myALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !GetAtt mySG.GroupId 
      Subnets: !Ref mySubnets 
      Type: application

  myASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs 
      DesiredCapacity: "2"
      HealthCheckGracePeriod: 90
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref myLT
        Version: "1"
      MaxSize: "3" # Required
      MinSize: "1" # Required
      TargetGroupARNs:
        - !Ref myTG

  myCPUPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref myASG  # Required
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 60.0

  myLT:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ami-01cc34ab2709337aa
        InstanceType: t2.micro
        KeyName: !Ref myKP
        SecurityGroupIds:
          - !GetAtt mySG.GroupId
        UserData: !Base64 |
          #!/bin/bash
          yum update -y
          yum install python3 -y
          pip3 install flask
          pip3 install flask-mysql
          pip3 install sqlalchemy
          pip3 install Flask-SQLAlchemy
          cd /home/ec2-user
          RDS=${MyDB.Endpoint.Address}
          echo "$RDS" > dbserver.endpoint
          wget https://raw.githubusercontent.com/skoc10/my_projects/main/aws/Project3-Phonebook-Application/phonebook-app.py
          mkdir templates
          cd templates
          wget https://raw.githubusercontent.com/skoc10/my_projects/main/aws/Project3-Phonebook-Application/templates/index.html
          wget https://raw.githubusercontent.com/skoc10/my_projects/main/aws/Project3-Phonebook-Application/templates/delete.html  
          wget https://raw.githubusercontent.com/skoc10/my_projects/main/aws/Project3-Phonebook-Application/templates/add-update.html
          cd ..
          python3 phonebook-app.py
  myTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      VpcId: !Ref myVPC

  mySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enables SSH and HTTP" # Required
      SecurityGroupIngress:
        -   CidrIp: 0.0.0.0/0
            FromPort: 22
            ToPort: 22
            IpProtocol: tcp

        -   CidrIp: 0.0.0.0/0
            FromPort: 80
            ToPort: 80
            IpProtocol: tcp
      VpcId: !Ref myVPC



Outputs:

  AppUrl:
    Description: Url of the ALB
    Value: !Join
      - ""
      - - "http://"
        - !GetAtt myALB.DNSName 

  RDSEndPoint:
    Description: 'The RDS Endpoint of MySQL DB'
    Value: !GetAtt MyDB.Endpoint.Address

